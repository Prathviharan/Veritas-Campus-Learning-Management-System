{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\LMS\\\\Veritas-Campus-Learning-Management-System\\\\frontend\\\\src\\\\pages\\\\instructor\\\\InstructorNotificationForm.js\",\n  _s = $RefreshSig$();\n/* import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './InstructorNotificationForm.css';\r\n\r\nconst InstructorNotificationForm = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [feedback, setFeedback] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await axios.post('http://localhost:5000/api/notifications', { message });\r\n      setFeedback('Notification sent successfully!');\r\n      setMessage('');\r\n    } catch (err) {\r\n      console.error('Error sending notification:', err);\r\n      setFeedback('Failed to send notification.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-page\">\r\n      <h2>Send Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Enter your notification message...\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      {feedback && <p className=\"feedback\">{feedback}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;  */\n\n/* import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../student/Notification.css';\r\n\r\n\r\nconst InstructorNotificationForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [status, setStatus] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post('http://localhost:5000/api/notifications', { title, message });\r\n      setStatus('Notification sent successfully!');\r\n      setTitle('');\r\n      setMessage('');\r\n    } catch (err) {\r\n      setStatus('Failed to send notification.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-form\">\r\n      <h2>Send Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"Message\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      {status && <p className=\"status-message\">{status}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;   */\n\n/*\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './InstructorNotificationForm.css';\r\n\r\nconst InstructorNotificationForm = ({ courses = [] }) => {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    message: '',\r\n    course: '',\r\n    isImportant: false\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/instructor/notifications', formData);\r\n      \r\n      if (response.data.success) {\r\n        setSuccess('Notification sent successfully!');\r\n        setFormData({\r\n          title: '',\r\n          message: '',\r\n          course: '',\r\n          isImportant: false\r\n        });\r\n      } else {\r\n        setError(response.data.error || 'Failed to send notification');\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Failed to send notification');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-form-container\">\r\n      <h2>Create New Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Title *</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={formData.title}\r\n            onChange={(e) => setFormData({...formData, title: e.target.value})}\r\n            required\r\n            maxLength=\"100\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Message *</label>\r\n          <textarea\r\n            name=\"message\"\r\n            value={formData.message}\r\n            onChange={(e) => setFormData({...formData, message: e.target.value})}\r\n            required\r\n            rows=\"5\"\r\n            maxLength=\"500\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Course (optional)</label>\r\n          <select\r\n            name=\"course\"\r\n            value={formData.course}\r\n            onChange={(e) => setFormData({...formData, course: e.target.value})}\r\n          >\r\n            <option value=\"\">Select a course</option>\r\n            {courses.map(course => (\r\n              <option key={course._id} value={course._id}>\r\n                {course.name} ({course.code})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group checkbox-group\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"isImportant\"\r\n            name=\"isImportant\"\r\n            checked={formData.isImportant}\r\n            onChange={(e) => setFormData({...formData, isImportant: e.target.checked})}\r\n          />\r\n          <label htmlFor=\"isImportant\">Mark as important</label>\r\n        </div>\r\n\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        {success && <div className=\"success-message\">{success}</div>}\r\n\r\n        <button type=\"submit\" className=\"submit-btn\">\r\n          Send Notification\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;  */\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './InstructorNotificationForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InstructorNotificationForm = ({\n  courses = []\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    message: '',\n    course: '',\n    isImportant: false\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      console.log('Submitting:', formData); // Debug log\n\n      const response = await axios.post('http://localhost:5000/api/instructor/notifications', {\n        ...formData,\n        instructor: 'demo-instructor-id' // Temporary for testing\n      });\n      console.log('Response:', response.data); // Debug log\n\n      if (response.data.success) {\n        setSuccess('Notification sent successfully!');\n        setFormData({\n          title: '',\n          message: '',\n          course: '',\n          isImportant: false\n        });\n        setError('');\n      } else {\n        setError(response.data.error || 'Failed to send notification');\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Submission error:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message || 'Failed to connect to server');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Notification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"title\",\n          value: formData.title,\n          onChange: e => setFormData({\n            ...formData,\n            title: e.target.value\n          }),\n          required: true,\n          maxLength: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"message\",\n          value: formData.message,\n          onChange: e => setFormData({\n            ...formData,\n            message: e.target.value\n          }),\n          required: true,\n          rows: \"5\",\n          maxLength: \"500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Course (optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"course\",\n          value: formData.course,\n          onChange: e => setFormData({\n            ...formData,\n            course: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), courses.map(course => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: course._id,\n            children: [course.name, \" (\", course.code, \")\"]\n          }, course._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group checkbox-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"isImportant\",\n          name: \"isImportant\",\n          checked: formData.isImportant,\n          onChange: e => setFormData({\n            ...formData,\n            isImportant: e.target.checked\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"isImportant\",\n          children: \"Mark as important\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [\"Error: \", error, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setError(''),\n          className: \"close-error\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: [success, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setSuccess(''),\n          className: \"close-success\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-btn\",\n        children: \"Send Notification\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_s(InstructorNotificationForm, \"dIX0HevDaJM8N9tHkRYd3sj6K1o=\");\n_c = InstructorNotificationForm;\nexport default InstructorNotificationForm;\nvar _c;\n$RefreshReg$(_c, \"InstructorNotificationForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","InstructorNotificationForm","courses","_s","formData","setFormData","title","message","course","isImportant","error","setError","success","setSuccess","handleSubmit","e","preventDefault","console","log","response","post","instructor","data","err","_err$response","_err$response$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","value","onChange","target","required","maxLength","rows","map","_id","code","id","checked","htmlFor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/LMS/Veritas-Campus-Learning-Management-System/frontend/src/pages/instructor/InstructorNotificationForm.js"],"sourcesContent":["/* import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './InstructorNotificationForm.css';\r\n\r\nconst InstructorNotificationForm = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [feedback, setFeedback] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await axios.post('http://localhost:5000/api/notifications', { message });\r\n      setFeedback('Notification sent successfully!');\r\n      setMessage('');\r\n    } catch (err) {\r\n      console.error('Error sending notification:', err);\r\n      setFeedback('Failed to send notification.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-page\">\r\n      <h2>Send Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Enter your notification message...\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      {feedback && <p className=\"feedback\">{feedback}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;  */\r\n\r\n/* import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../student/Notification.css';\r\n\r\n\r\nconst InstructorNotificationForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [status, setStatus] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post('http://localhost:5000/api/notifications', { title, message });\r\n      setStatus('Notification sent successfully!');\r\n      setTitle('');\r\n      setMessage('');\r\n    } catch (err) {\r\n      setStatus('Failed to send notification.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-form\">\r\n      <h2>Send Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"Message\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      {status && <p className=\"status-message\">{status}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;   */\r\n\r\n\r\n\r\n/*\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './InstructorNotificationForm.css';\r\n\r\nconst InstructorNotificationForm = ({ courses = [] }) => {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    message: '',\r\n    course: '',\r\n    isImportant: false\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/instructor/notifications', formData);\r\n      \r\n      if (response.data.success) {\r\n        setSuccess('Notification sent successfully!');\r\n        setFormData({\r\n          title: '',\r\n          message: '',\r\n          course: '',\r\n          isImportant: false\r\n        });\r\n      } else {\r\n        setError(response.data.error || 'Failed to send notification');\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Failed to send notification');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-form-container\">\r\n      <h2>Create New Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Title *</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={formData.title}\r\n            onChange={(e) => setFormData({...formData, title: e.target.value})}\r\n            required\r\n            maxLength=\"100\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Message *</label>\r\n          <textarea\r\n            name=\"message\"\r\n            value={formData.message}\r\n            onChange={(e) => setFormData({...formData, message: e.target.value})}\r\n            required\r\n            rows=\"5\"\r\n            maxLength=\"500\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Course (optional)</label>\r\n          <select\r\n            name=\"course\"\r\n            value={formData.course}\r\n            onChange={(e) => setFormData({...formData, course: e.target.value})}\r\n          >\r\n            <option value=\"\">Select a course</option>\r\n            {courses.map(course => (\r\n              <option key={course._id} value={course._id}>\r\n                {course.name} ({course.code})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group checkbox-group\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"isImportant\"\r\n            name=\"isImportant\"\r\n            checked={formData.isImportant}\r\n            onChange={(e) => setFormData({...formData, isImportant: e.target.checked})}\r\n          />\r\n          <label htmlFor=\"isImportant\">Mark as important</label>\r\n        </div>\r\n\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        {success && <div className=\"success-message\">{success}</div>}\r\n\r\n        <button type=\"submit\" className=\"submit-btn\">\r\n          Send Notification\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;  */\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './InstructorNotificationForm.css';\r\n\r\nconst InstructorNotificationForm = ({ courses = [] }) => {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    message: '',\r\n    course: '',\r\n    isImportant: false\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      console.log('Submitting:', formData); // Debug log\r\n      \r\n      const response = await axios.post('http://localhost:5000/api/instructor/notifications', {\r\n        ...formData,\r\n        instructor: 'demo-instructor-id' // Temporary for testing\r\n      });\r\n\r\n      console.log('Response:', response.data); // Debug log\r\n      \r\n      if (response.data.success) {\r\n        setSuccess('Notification sent successfully!');\r\n        setFormData({\r\n          title: '',\r\n          message: '',\r\n          course: '',\r\n          isImportant: false\r\n        });\r\n        setError('');\r\n      } else {\r\n        setError(response.data.error || 'Failed to send notification');\r\n      }\r\n    } catch (err) {\r\n      console.error('Submission error:', err);\r\n      setError(err.response?.data?.error || \r\n              err.message || \r\n              'Failed to connect to server');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-form-container\">\r\n      <h2>Create New Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Title *</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={formData.title}\r\n            onChange={(e) => setFormData({...formData, title: e.target.value})}\r\n            required\r\n            maxLength=\"100\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Message *</label>\r\n          <textarea\r\n            name=\"message\"\r\n            value={formData.message}\r\n            onChange={(e) => setFormData({...formData, message: e.target.value})}\r\n            required\r\n            rows=\"5\"\r\n            maxLength=\"500\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Course (optional)</label>\r\n          <select\r\n            name=\"course\"\r\n            value={formData.course}\r\n            onChange={(e) => setFormData({...formData, course: e.target.value})}\r\n          >\r\n            <option value=\"\">Select a course</option>\r\n            {courses.map(course => (\r\n              <option key={course._id} value={course._id}>\r\n                {course.name} ({course.code})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group checkbox-group\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"isImportant\"\r\n            name=\"isImportant\"\r\n            checked={formData.isImportant}\r\n            onChange={(e) => setFormData({...formData, isImportant: e.target.checked})}\r\n          />\r\n          <label htmlFor=\"isImportant\">Mark as important</label>\r\n        </div>\r\n        \r\n        {error && (\r\n          <div className=\"error-message\">\r\n            Error: {error}\r\n            <button onClick={() => setError('')} className=\"close-error\">×</button>\r\n          </div>\r\n        )}\r\n        \r\n        {success && (\r\n          <div className=\"success-message\">\r\n            {success}\r\n            <button onClick={() => setSuccess('')} className=\"close-success\">×</button>\r\n          </div>\r\n        )}\r\n\r\n        <button type=\"submit\" className=\"submit-btn\">\r\n          Send Notification\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,0BAA0B,GAAGA,CAAC;EAAEC,OAAO,GAAG;AAAG,CAAC,KAAK;EAAAC,EAAA;EACvD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC;IACvCS,KAAK,EAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}