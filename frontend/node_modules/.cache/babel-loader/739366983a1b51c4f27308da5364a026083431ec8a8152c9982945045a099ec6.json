{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\LMS\\\\Veritas-Campus-Learning-Management-System\\\\frontend\\\\src\\\\pages\\\\instructor\\\\InstructorNotificationForm.js\",\n  _s = $RefreshSig$();\n/* import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './InstructorNotificationForm.css';\r\n\r\nconst InstructorNotificationForm = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [feedback, setFeedback] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await axios.post('http://localhost:5000/api/notifications', { message });\r\n      setFeedback('Notification sent successfully!');\r\n      setMessage('');\r\n    } catch (err) {\r\n      console.error('Error sending notification:', err);\r\n      setFeedback('Failed to send notification.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-page\">\r\n      <h2>Send Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Enter your notification message...\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      {feedback && <p className=\"feedback\">{feedback}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;  */\n\n/* import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../student/Notification.css';\r\n\r\n\r\nconst InstructorNotificationForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [status, setStatus] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post('http://localhost:5000/api/notifications', { title, message });\r\n      setStatus('Notification sent successfully!');\r\n      setTitle('');\r\n      setMessage('');\r\n    } catch (err) {\r\n      setStatus('Failed to send notification.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-form\">\r\n      <h2>Send Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"Message\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      {status && <p className=\"status-message\">{status}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;   */\n\n/*\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './InstructorNotificationForm.css';\r\n\r\nconst InstructorNotificationForm = ({ courses = [] }) => {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    message: '',\r\n    course: '',\r\n    isImportant: false\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/instructor/notifications', formData);\r\n      \r\n      if (response.data.success) {\r\n        setSuccess('Notification sent successfully!');\r\n        setFormData({\r\n          title: '',\r\n          message: '',\r\n          course: '',\r\n          isImportant: false\r\n        });\r\n      } else {\r\n        setError(response.data.error || 'Failed to send notification');\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Failed to send notification');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-form-container\">\r\n      <h2>Create New Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Title *</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={formData.title}\r\n            onChange={(e) => setFormData({...formData, title: e.target.value})}\r\n            required\r\n            maxLength=\"100\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Message *</label>\r\n          <textarea\r\n            name=\"message\"\r\n            value={formData.message}\r\n            onChange={(e) => setFormData({...formData, message: e.target.value})}\r\n            required\r\n            rows=\"5\"\r\n            maxLength=\"500\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Course (optional)</label>\r\n          <select\r\n            name=\"course\"\r\n            value={formData.course}\r\n            onChange={(e) => setFormData({...formData, course: e.target.value})}\r\n          >\r\n            <option value=\"\">Select a course</option>\r\n            {courses.map(course => (\r\n              <option key={course._id} value={course._id}>\r\n                {course.name} ({course.code})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group checkbox-group\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"isImportant\"\r\n            name=\"isImportant\"\r\n            checked={formData.isImportant}\r\n            onChange={(e) => setFormData({...formData, isImportant: e.target.checked})}\r\n          />\r\n          <label htmlFor=\"isImportant\">Mark as important</label>\r\n        </div>\r\n\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        {success && <div className=\"success-message\">{success}</div>}\r\n\r\n        <button type=\"submit\" className=\"submit-btn\">\r\n          Send Notification\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;  */\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './InstructorNotificationForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InstructorNotificationForm = ({\n  courses = []\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    title: '',\n    message: '',\n    course: '',\n    isImportant: false\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n    setIsSubmitting(true);\n    try {\n      const response = await axios.post('http://localhost:5000/api/instructor/notifications', formData);\n      if (response.data.success) {\n        setSuccess('Notification sent successfully!');\n        setFormData({\n          title: '',\n          message: '',\n          course: '',\n          isImportant: false\n        });\n      }\n    } catch (err) {\n      console.error('Full error object:', err); // Add this for debugging\n      if (err.response) {\n        // The request was made and the server responded with a status code\n        console.error('Response data:', err.response.data);\n        console.error('Response status:', err.response.status);\n        console.error('Response headers:', err.response.headers);\n        setError(err.response.data.error || `Request failed with status ${err.response.status}`);\n      } else if (err.request) {\n        // The request was made but no response was received\n        console.error('Request:', err.request);\n        setError('No response received from server');\n      } else {\n        // Something happened in setting up the request\n        console.error('Error message:', err.message);\n        setError(err.message);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Notification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"title\",\n          value: formData.title,\n          onChange: e => setFormData({\n            ...formData,\n            title: e.target.value\n          }),\n          required: true,\n          maxLength: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"message\",\n          value: formData.message,\n          onChange: e => setFormData({\n            ...formData,\n            message: e.target.value\n          }),\n          required: true,\n          rows: \"5\",\n          maxLength: \"500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), courses.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Course (optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"course\",\n          value: formData.course,\n          onChange: e => setFormData({\n            ...formData,\n            course: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this), courses.map(course => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: course._id,\n            children: course.name\n          }, course._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group checkbox-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"isImportant\",\n          name: \"isImportant\",\n          checked: formData.isImportant,\n          onChange: e => setFormData({\n            ...formData,\n            isImportant: e.target.checked\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"isImportant\",\n          children: \"Mark as important\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 19\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success-message\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-btn\",\n        disabled: isSubmitting,\n        children: isSubmitting ? 'Sending...' : 'Send Notification'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(InstructorNotificationForm, \"6TQs7zwfoVxyhH9k90TIeeJcXA4=\");\n_c = InstructorNotificationForm;\nexport default InstructorNotificationForm;\nvar _c;\n$RefreshReg$(_c, \"InstructorNotificationForm\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","InstructorNotificationForm","courses","_s","formData","setFormData","title","message","course","isImportant","error","setError","success","setSuccess","isSubmitting","setIsSubmitting","handleSubmit","e","preventDefault","response","post","data","err","console","status","headers","request","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","value","onChange","target","required","maxLength","rows","length","map","_id","id","checked","htmlFor","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/LMS/Veritas-Campus-Learning-Management-System/frontend/src/pages/instructor/InstructorNotificationForm.js"],"sourcesContent":["/* import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './InstructorNotificationForm.css';\r\n\r\nconst InstructorNotificationForm = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [feedback, setFeedback] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await axios.post('http://localhost:5000/api/notifications', { message });\r\n      setFeedback('Notification sent successfully!');\r\n      setMessage('');\r\n    } catch (err) {\r\n      console.error('Error sending notification:', err);\r\n      setFeedback('Failed to send notification.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-page\">\r\n      <h2>Send Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          placeholder=\"Enter your notification message...\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      {feedback && <p className=\"feedback\">{feedback}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;  */\r\n\r\n/* import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../student/Notification.css';\r\n\r\n\r\nconst InstructorNotificationForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [status, setStatus] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await axios.post('http://localhost:5000/api/notifications', { title, message });\r\n      setStatus('Notification sent successfully!');\r\n      setTitle('');\r\n      setMessage('');\r\n    } catch (err) {\r\n      setStatus('Failed to send notification.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-form\">\r\n      <h2>Send Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n        />\r\n        <textarea\r\n          placeholder=\"Message\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      {status && <p className=\"status-message\">{status}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;   */\r\n\r\n\r\n\r\n/*\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './InstructorNotificationForm.css';\r\n\r\nconst InstructorNotificationForm = ({ courses = [] }) => {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    message: '',\r\n    course: '',\r\n    isImportant: false\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/instructor/notifications', formData);\r\n      \r\n      if (response.data.success) {\r\n        setSuccess('Notification sent successfully!');\r\n        setFormData({\r\n          title: '',\r\n          message: '',\r\n          course: '',\r\n          isImportant: false\r\n        });\r\n      } else {\r\n        setError(response.data.error || 'Failed to send notification');\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.error || 'Failed to send notification');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"notification-form-container\">\r\n      <h2>Create New Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Title *</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={formData.title}\r\n            onChange={(e) => setFormData({...formData, title: e.target.value})}\r\n            required\r\n            maxLength=\"100\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Message *</label>\r\n          <textarea\r\n            name=\"message\"\r\n            value={formData.message}\r\n            onChange={(e) => setFormData({...formData, message: e.target.value})}\r\n            required\r\n            rows=\"5\"\r\n            maxLength=\"500\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Course (optional)</label>\r\n          <select\r\n            name=\"course\"\r\n            value={formData.course}\r\n            onChange={(e) => setFormData({...formData, course: e.target.value})}\r\n          >\r\n            <option value=\"\">Select a course</option>\r\n            {courses.map(course => (\r\n              <option key={course._id} value={course._id}>\r\n                {course.name} ({course.code})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className=\"form-group checkbox-group\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"isImportant\"\r\n            name=\"isImportant\"\r\n            checked={formData.isImportant}\r\n            onChange={(e) => setFormData({...formData, isImportant: e.target.checked})}\r\n          />\r\n          <label htmlFor=\"isImportant\">Mark as important</label>\r\n        </div>\r\n\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        {success && <div className=\"success-message\">{success}</div>}\r\n\r\n        <button type=\"submit\" className=\"submit-btn\">\r\n          Send Notification\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;  */\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './InstructorNotificationForm.css';\r\n\r\nconst InstructorNotificationForm = ({ courses = [] }) => {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    message: '',\r\n    course: '',\r\n    isImportant: false\r\n  });\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n  setError('');\r\n  setSuccess('');\r\n  setIsSubmitting(true);\r\n\r\n  try {\r\n    const response = await axios.post(\r\n      'http://localhost:5000/api/instructor/notifications',\r\n      formData\r\n    );\r\n\r\n    if (response.data.success) {\r\n      setSuccess('Notification sent successfully!');\r\n      setFormData({\r\n        title: '',\r\n        message: '',\r\n        course: '',\r\n        isImportant: false\r\n      });\r\n    }\r\n  } catch (err) {\r\n    console.error('Full error object:', err); // Add this for debugging\r\n    if (err.response) {\r\n      // The request was made and the server responded with a status code\r\n      console.error('Response data:', err.response.data);\r\n      console.error('Response status:', err.response.status);\r\n      console.error('Response headers:', err.response.headers);\r\n      setError(err.response.data.error || `Request failed with status ${err.response.status}`);\r\n    } else if (err.request) {\r\n      // The request was made but no response was received\r\n      console.error('Request:', err.request);\r\n      setError('No response received from server');\r\n    } else {\r\n      // Something happened in setting up the request\r\n      console.error('Error message:', err.message);\r\n      setError(err.message);\r\n    }\r\n  } finally {\r\n    setIsSubmitting(false);\r\n  }\r\n};\r\n\r\n  return (\r\n    <div className=\"notification-form-container\">\r\n      <h2>Create New Notification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Title *</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={formData.title}\r\n            onChange={(e) => setFormData({ ...formData, title: e.target.value })}\r\n            required\r\n            maxLength=\"100\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label>Message *</label>\r\n          <textarea\r\n            name=\"message\"\r\n            value={formData.message}\r\n            onChange={(e) => setFormData({ ...formData, message: e.target.value })}\r\n            required\r\n            rows=\"5\"\r\n            maxLength=\"500\"\r\n          />\r\n        </div>\r\n\r\n        {courses.length > 0 && (\r\n          <div className=\"form-group\">\r\n            <label>Course (optional)</label>\r\n            <select\r\n              name=\"course\"\r\n              value={formData.course}\r\n              onChange={(e) => setFormData({ ...formData, course: e.target.value })}\r\n            >\r\n              <option value=\"\">Select a course</option>\r\n              {courses.map((course) => (\r\n                <option key={course._id} value={course._id}>\r\n                  {course.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"form-group checkbox-group\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"isImportant\"\r\n            name=\"isImportant\"\r\n            checked={formData.isImportant}\r\n            onChange={(e) => setFormData({ ...formData, isImportant: e.target.checked })}\r\n          />\r\n          <label htmlFor=\"isImportant\">Mark as important</label>\r\n        </div>\r\n\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        {success && <div className=\"success-message\">{success}</div>}\r\n\r\n        <button \r\n          type=\"submit\" \r\n          className=\"submit-btn\"\r\n          disabled={isSubmitting}\r\n        >\r\n          {isSubmitting ? 'Sending...' : 'Send Notification'}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InstructorNotificationForm;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,0BAA0B,GAAGA,CAAC;EAAEC,OAAO,GAAG;AAAG,CAAC,KAAK;EAAAC,EAAA;EACvD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC;IACvCS,KAAK,EAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}